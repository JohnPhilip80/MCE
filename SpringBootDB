CRUD Operations using Spring Boot with Database


Install MySQL (Install Community version) or Use H2 Database
Install Postman Application

Create your Workspace folder
	D drive
	create folder by your name
	under your name folder create folder SpringBootProjects
	D:/John/SpringBootProjects

Create Spring Boot Project
	Open chrome browser and go the following website.
	https://start.spring.io/
		Project - Maven
		Language - Java
		Spring Boot - 3.4.5
		Project Metadata
		Group - edu.mce.john
		Artifact - studentdb
		Name - 
		Description -
		Package name - edu.mce.john.studentdb
		Packaging - Jar
		Java - 17
	Dependencies
		click Add Dependencies
		enter Spring Web
		select the first one.
    enter jpa
    select the first one.
    enter h2
    select the first one.
		click Generate
	This will generate a project zip file in your system downloads folder.

Extract Project zip folder to your workspace folder
	Go to your downloads folder (open folder explorer, left hand side 'downloads' folder will be there).
	Project zip file named studentdb.zip will be there. Right click. click 'Extract all ...'
	click 'browse' button. go to 'SpringBootProjects' folder under your name folder (created early). 
	dont open the 'SpringBootProjects' folder. just select that folder. click 'Select Folder' button.
	click extract.
	'studentdb' folder will be created under your 'SpringBootProjects' folder.

Open your Workspace folder in Eclipse
	Open Eclipse
	File -> Switch Workspace
	check your SpringBootProjects folder is selected. if not browse and select that folder.
	click 'Launch'

Open studentdb project in eclipse
	File -> Open Projects from File System...
	click 'Directory' button.
	go to your 'SpringBootProjects' folder. 
	select 'studentdb' folder. dont open it. click select folder.
	click finish.

Hello World Program in Console. 
	Expand src/main/java/
	Expand the base package edu.mse.john.studentdb
	StudentdbApplication.java - open by double click
	Next to the line SpringApplication.run(StudentApplication.class, args);
	type System.out.println("Hello World");
	save file.
	Run -> Run As -> Java Application
	Click on Terminate button (red color button) in the console.
	

Create 4 packages - repositories, services, controllers and entities 
	Right click on base package edu.mce.john.studentdb
	New -> Package -> Name: edu.mce.john.studentdb.repositories -> Finish
	Right click on base package edu.mce.john.studentdb
	New -> Package -> Name: edu.mce.john.studentdb.services -> Finish
	Right click on base package edu.mce.john.studentdb
	New -> Package -> Name: edu.mce.john.studentdb.controllers -> Finish
	Right click on base package edu.mce.john.studentdb
	New -> Package -> Name: edu.mce.john.studentdb.entities -> Finish
	
	
Create Classes and interfaces in repositories, services, controllers and entities packages
	Right click on repositories package
	New -> Interface -> Name: StudentRepository -> Finish
	Right click on repositories package
	New -> Interface -> Name: StudentCRUD -> Finish
	Right click on services package
	New -> Class -> Name: StudentService -> Finish
	Right click on controllers package
	New -> Class -> Name: StudentController -> Finish
	Right click on entities package
	New -> Class -> Name: Student -> Finish

Install Postman App.
	https://www.postman.com/downloads/

src/main/resources/application.properties file

##
server.port = 8090
# ## In memory store: not persistent
# spring.datasource.url=jdbc:h2:mem:app_db;DB_CLOSE_ON_EXIT=FALSE

# ## Local db filestore: in your home folder
# spring.datasource.url=jdbc:h2:file:~/h2db/h2_db_example/app_db;DB_CLOSE_ON_EXIT=FALSE

# ## Local db filestore: in base directory in folder "data"
spring.datasource.url=jdbc:h2:file:./data/app_db;DB_CLOSE_ON_EXIT=FALSE

# h2 defaults:
spring.datasource.username=sa
spring.datasource.password=pass

spring.datasource.driverClassName=org.h2.Driver

# Use "create" or "create-drop" when you wish to recreate database on restart; use 
# "update" or "validate" when data is to be kept.
spring.jpa.hibernate.ddl-auto=update

# 
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true

spring.h2.console.enabled=true
spring.h2.console.path=/h2-console


CREATE TABLE student(
student_id BIGINT PRIMARY KEY AUTO_INCREMENT,
student_name VARCHAR(80),
student_email VARCHAR(90),
student_phone BIGINT,
student_course VARCHAR(10),
student_cgpa DECIMAL(5,2));

DROP TABLE student;

INSERT INTO student (student_name,student_email,student_phone,
student_course,student_cgpa) VALUES ('Aruna','aruna@gmail.com','123456',
'ECE',8.2);

INSERT INTO student (student_name,student_email,student_phone,
student_course,student_cgpa) VALUES ('Siva','siva@gmail.com','123456',
'EEE',7.9);

INSERT INTO student (student_name,student_email,student_phone,
student_course,student_cgpa) VALUES ('Keerthi','keerthi@gmail.com','123456',
'MCA',9.5);


UPDATE student SET student_phone = 98989898, student_course='MCA' WHERE student_id = 2;

SELECT * FROM student;

DELETE  FROM student where student_id > 5;

SELECT * FROM student;


package edu.mce.john.studentdb.entities;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;

@Entity
@Table(name="student")
public class Student {
	@Id
	@GeneratedValue(strategy=GenerationType.IDENTITY)
	@Column(name = "student_id")
	private Long studentId;
	@Column(name = "student_name", length=60)
	private String studentName;
	@Column(name = "student_email", length=70)
	private String studentEmail;
	@Column(name = "student_phone")
	private Long studentPhone;
	@Column(name = "student_course", length=10)
	private String studentCourse;
	@Column(name = "student_cgpa", length=60)
	private Double studentCGPA;
	public Student(String studentName, String studentEmail, Long studentPhone, String studentCourse,
			Double studentCGPA) {
		super();
		this.studentName = studentName;
		this.studentEmail = studentEmail;
		this.studentPhone = studentPhone;
		this.studentCourse = studentCourse;
		this.studentCGPA = studentCGPA;
	}
	public Student(Long studentId, String studentName, String studentEmail, Long studentPhone, String studentCourse,
			Double studentCGPA) {
		super();
		this.studentId = studentId;
		this.studentName = studentName;
		this.studentEmail = studentEmail;
		this.studentPhone = studentPhone;
		this.studentCourse = studentCourse;
		this.studentCGPA = studentCGPA;
	}
	public Student() {
		super();
		// TODO Auto-generated constructor stub
	}
	public Long getStudentId() {
		return studentId;
	}
	public void setStudentId(Long studentId) {
		this.studentId = studentId;
	}
	public String getStudentName() {
		return studentName;
	}
	public void setStudentName(String studentName) {
		this.studentName = studentName;
	}
	public String getStudentEmail() {
		return studentEmail;
	}
	public void setStudentEmail(String studentEmail) {
		this.studentEmail = studentEmail;
	}
	public Long getStudentPhone() {
		return studentPhone;
	}
	public void setStudentPhone(Long studentPhone) {
		this.studentPhone = studentPhone;
	}
	public String getStudentCourse() {
		return studentCourse;
	}
	public void setStudentCourse(String studentCourse) {
		this.studentCourse = studentCourse;
	}
	public Double getStudentCGPA() {
		return studentCGPA;
	}
	public void setStudentCGPA(Double studentCGPA) {
		this.studentCGPA = studentCGPA;
	}
}


package edu.mce.john.studentdb.repositories;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import edu.mce.john.studentdb.entities.Student;

@Repository
public interface StudentRepository extends JpaRepository<Student,Long> {
	Student getStudentByStudentId(Long id);
}



package edu.mce.john.studentdb.services;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import edu.mce.john.studentdb.entities.Student;
import edu.mce.john.studentdb.repositories.StudentRepository;

@Service
public class StudentService {
	@Autowired
	private StudentRepository repo;
	
	public List<Student> readStudents(){
		return repo.findAll();
	}
	public void createStudent(Student st) {
		repo.save(st);
	}
	public void updateStudent(Student st) {
		repo.save(st);
	}
	public void deleteStudent(Long id) {
		repo.deleteById(id);
	}
	public Student getStudentByStudentId(Long id) {
		return repo.getStudentByStudentId(id);
	}
}


package edu.mce.john.studentdb.controllers;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import edu.mce.john.studentdb.entities.Student;
import edu.mce.john.studentdb.services.StudentService;

@RestController
@RequestMapping("/student/api")
public class StudentController {
	@Autowired
	private StudentService service;
	
	@GetMapping("/readstudents")
	public List<Student> readStudents() {
		return service.readStudents();
	}
	@PostMapping("/createstudent")
	public String createStudent(@RequestBody Student st) {
		service.createStudent(st);
		return "Student Created Successfully";
	}
	@PutMapping("/updatestudent")
	public String updateStudent(@RequestBody Student st) {
		service.updateStudent(st);
		return "Student Updated Successfully";
	}
	@DeleteMapping("/deletestudent")
	public String deleteStudent(@RequestParam Long id) {
		service.deleteStudent(id);
		return "Student Deleted Successfully";
	}
	@GetMapping("/readstudent")
	public Student readBook(@RequestParam Long id) {
		return service.getStudentByStudentId(id);
	}
}

